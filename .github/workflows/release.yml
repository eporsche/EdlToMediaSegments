name: Build & Release (MD5 only)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # needed to upload release assets

    env:
      PROJECT_PATH: src/EdlToMediaSegments/EdlToMediaSegments.csproj
      DLL_NAME: EdlToMediaSegments

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore "$PROJECT_PATH"

      - name: Build (Release)
        run: dotnet build "$PROJECT_PATH" -c Release --nologo

      - name: Locate build output
        id: build
        shell: bash
        run: |
          TFM=$(jq -r '.PropertyGroup[]?.TargetFramework // empty' "$PROJECT_PATH" | tail -n1)
          [ -z "$TFM" ] && TFM=net8.0
          OUT="$(dirname "$PROJECT_PATH")/bin/Release/${TFM}"
          echo "out_dir=$OUT" >> "$GITHUB_OUTPUT"

      - name: Create release zip (DLL only)
        id: zip
        run: |
          TAG="${GITHUB_REF_NAME}"
          mkdir -p dist
          cp "${{ steps.build.outputs.out_dir }}/${{ env.DLL_NAME }}.dll" dist/
          cd dist
          ZIP="EdlToMediaSegments-${TAG}.zip"
          zip -r "$ZIP" "${{ env.DLL_NAME }}.dll"
          md5sum "$ZIP" | awk '{print tolower($1)}' > "$ZIP.md5"
          echo "zip=dist/$ZIP" >> "$GITHUB_OUTPUT"
          echo "md5=$(cut -d' ' -f1 "$ZIP.md5")" >> "$GITHUB_OUTPUT"
          cd ..
        shell: bash

      - name: Create / Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }} Latest
          make_latest: true
          draft: false
          prerelease: false
          body: |
            Initial release.

            **md5:** ${{ steps.zip.outputs.md5 }}
          files: |
            ${{ steps.zip.outputs.zip }}
            ${{ steps.zip.outputs.zip }}.md5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
